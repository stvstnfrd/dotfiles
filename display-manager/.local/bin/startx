#!/bin/sh
#h NAME:
#h 	startx
#h
#h SYNOPSIS:
#h 	startx -h
#h 	startx -m
#h 	startx [clientarg ...] [-- [display] [serverarg] ...]
#h
#h DESCRIPTION:
#h 	The startx script is a front end to xinit(1) that provides a somewhat nicer
#h 	user interface for running a single session of the X Window System.
#h 	It is often run with no arguments.
#h
#h 	Arguments immediately following the startx command are used to start a client
#h 	in the same manner as xinit(1). The special argument '--' marks the end of
#h 	client arguments and the beginning of server options. It may be convenient to
#h 	specify server options with startx to change them on a per-session basis. Some
#h 	examples of specifying server arguments follow; consult the manual page for
#h 	your X server to determine which arguments are legal.
#h
#h 		startx -- -depth 16
#h 		startx -- -dpi 100
#h 		startx -- -layout Multihead
#h
#h 	Note that in the Debian system, what many people traditionally put in the
#h 	.xinitrc file should go in .xsession instead; this permits the same X
#h 	environment to be presented whether startx, xdm, or xinit is used to start the
#h 	X session. All discussion of the .xinitrc file in the xinit(1) manual page
#h 	applies equally well to .xsession. Keep in mind that .xinitrc is used only by
#h 	xinit(1) and completely ignored by xdm(1).
#h
#h 	To determine the client to run, startx looks for the following files, in order:
#h
#h 		$(HOME)/.startxrc
#h 		/usr/lib/x86_64-linux-gnu/sys.startxrc
#h 		$(HOME)/.xinitrc
#h 		/etc/X11/xinit/xinitrc
#h
#h 	If command line client options are given, they override this behavior and
#h 	revert to the xinit(1) behavior. To determine the server to run, startx first
#h 	looks for a file called .xserverrc in the user's home directory. If that is not
#h 	found, it uses the file xserverrc in the xinit library directory. If command
#h 	line server options are given, they override this behavior and revert to the
#h 	xinit(1) behavior. Users rarely need to provide a .xserverrc file. See the
#h 	xinit(1) manual page for more details on the arguments.
#h
#h 	The system-wide xinitrc and xserverrc files are found in the
#h 	/etc/X11/xinit directory.
#h
#h EXAMPLES:
#h 	Start X with system defaults.
#h 		startx
#h
#h 	Start X with system defaults, explicitly.
#h 		startx default
#h
#h 	Start X with with a failsafe terminal.
#h 		startx failsafe
#h
#h 	Start X with the i3 window manager.
#h 		startx i3
#h
#h 	Start X with the XFCE desktop environment.
#h 		startx xfce4-session
#h
#h 	Start X on Display 3.
#h 		startx -- :3
#h
#h OVERVIEW:
#h 	This is a (mostly) drop-in replacement for Ubuntu's /usr/bin/startx.
#h
#h OPTIONS:
#h 	-h, --help
#h 		Print this message and exit.
#h
#h 	-m, --man
#h 		View this message in a PAGER and exit.
#h
#h 	clientarg ...
#h 	clientarg ...
#h 		These options are passed to the XINITRC script.
#h
#h 	display
#h 		This is the target display to start on, colon-prefixed (":0").
#h
#h 	serverarg ...
#h 		These options are passed to the XSERVERRC script.
#h
#h DEFAULTS:
#h 	The client script exec'ed by xinit,
#h 	if ${XINITRC} is not set, is the first found from:
#h 		${XDG_CONFIG_HOME}/x11/client
#h 		/etc/X11/xinit/xinitrc
#h
#h 	The server script for the client to connect to,
#h 	if ${XSERVERRC} is not set, is the first found from:
#h 		${XDG_CONFIG_HOME}/x11/server
#h 		/etc/X11/xinit/xserverrc
#h
#h EXIT STATUS:
#h 	Returns the result from `xinit`.
#h
#h ENVIRONMENT:
#h 	XINPUTRC
#h 		Client to run, default is ~/.config/x11/client .
#h
#h 	XSERVERRC
#h 		Server to run, default is ~/.config/x11/server .
#h
#h 	DISPLAY
#h 		This variable gets set to the name of the display
#h 		to which clients should connect. Note that this gets set, not read.
#h
#h 	XAUTHORITY
#h 		This variable, if not already defined,
#h 		gets set to $(XDG_CACHE_HOME})/.Xauthority.
#h 		This is to prevent the X server, if not given the -auth argument,
#h 		from automatically setting up insecure host-based authentication
#h 		for the local host.
#h 		See the Xserver(1) and Xsecurity(7) manual pages for more information
#h 		on X client/server authentication.
#h
#h FILES:
#h 	$(XDG_CONFIG_HOME)/x11/client
#h 		Client to run. Typically a shell script which runs many programs in the background.
#h
#h 	$(XDG_CONFIG_HOME)/x11/server
#h 		Server to run, default is X.
#h
#h 	/etc/X11/xinit/xinitrc
#h 		Client to run if the user has no ${XINPUTRC} file.
#h
#h 	/etc/X11/xinit/xserverrc
#h 		Server to run if the user has no ${XSERVERRC} file.
#h
#h SEE ALSO:
#h 	xinit(1), X(7), Xserver(1), Xorg(1), xorg.conf(5)
#h
#h HISTORY:
#h 	stvstnfrd, 2021
#h
#h BUGS:
#h 	https://github.com/stvstnfrd/dotfiles/issues
#h
#h USAGE:
#h 	startx
#h VERSION:
#h 	0.0
#
# > Site administrators are STRONGLY urged to write nicer versions.
while getopts ":hm" option; do case ${option} in
    h) grep '^#h' "${0}" | sed 's/^#h \?//g'; exit;;
    m) "${0}" --help | ${PAGER:-less}; exit;;
    *) ;;
esac; done

detect_unused_display() {
    d=0
    while true
    do
        if [ -e "/tmp/.X${d}-lock" ] || [ -S "/tmp/.X11-unix/X${d}" ]
        then
            d=$(expr "${d}" + 1)
        else
            break
        fi
    done
    echo ":${d}"
    unset d
}

teardown() {
    enable_xauth=${1}
    xserverauthfile=${2}
    shift; shift;
    if [ -n "${enable_xauth}" ]
    then
        if [ -n "${*}" ]
        then
            # shellcheck disable=SC2086
            xauth remove "${@}"
        fi
        if [ -n "${xserverauthfile}" ]
        then
            rm -f "${xserverauthfile}"
        fi
    fi
    if command -v deallocvt > /dev/null 2>&1
    then
        deallocvt
    fi
}

parse_args() {
    whoseargs="client"
    clientargs=''
    serverargs=''
    while [ -n "${1}" ]
    do
        case "${1}" in
            --)
                whoseargs='server'
            ;;
            *)
                if [ "${whoseargs}" = 'client' ]
                then
                    clientargs="${clientargs} ${1}"
                else
                    # display must be the FIRST server argument
                    if [ -z "${serverargs}" ] && \
                            expr "${1}" : ':[0-9][0-9]*$' > /dev/null 2>&1
                    then
                        display="${1}"
                    else
                        serverargs="${serverargs} ${1}"
                    fi
                fi
            ;;
        esac
        shift
    done
    printf '%s\n%s\n%s\n%s\n%s\n' "${client:- }" "${clientargs:- }" "${server:- }" "${serverargs:- }" "${display:- }"
}

process_args() {
    read -r client
    read -r clientargs
    read -r server
    read -r serverargs
    read -r display
    clientargs=$(echo "${clientargs}" | sed 's/^ *//')
    serverargs=$(echo "${serverargs}" | sed 's/^ *//')
    defaultclientargs=default
    defaultserver=/usr/bin/X
    defaultserverargs=''
    sysclientrc=/etc/X11/xinit/xinitrc
    sysserverrc=/etc/X11/xinit/xserverrc
    userclientrc=${XINPUTRC:-${XDG_CONFIG_HOME:-${HOME}/.config}/x11/client}
    userserverrc=${XSERVERRC:-${XDG_CONFIG_HOME:-${HOME}/.config}/x11/server}

    if [ -f "${userclientrc}" ]; then
        client=${userclientrc}
    elif [ -f "${sysclientrc}" ]; then
        client=${sysclientrc}
    else
        client=
    fi
    if [ -f "${userserverrc}" ]
    then
        server=${userserverrc}
    elif [ -f "${sysserverrc}" ]
    then
        server=${sysserverrc}
    else
        server=${defaultserver}
    fi
    if [ -z "${clientargs}" ]
    then
        clientargs=${defaultclientargs}
    fi
    if [ -z "${serverargs}" ]
    then
        serverargs=${defaultserverargs}
    fi

    # When starting the defaultserver start X on the current tty to avoid
    # the startx session being seen as inactive:
    # "https://bugzilla.redhat.com/show_bug.cgi?id=806491"
    tty=$(tty)
    vtarg=''
    if expr "$tty" : '/dev/tty[0-9][0-9]*$' > /dev/null
    then
        tty_num=$(echo "${tty}" | grep -oE '[0-9]+$')
        vtarg="vt${tty_num} -keeptty"
    fi

    # if no vt is specified add vtarg (which may be empty)
    have_vtarg="no"
    for i in ${serverargs}; do
        if expr "$i" : 'vt[0-9][0-9]*$' > /dev/null; then
            have_vtarg="yes"
        fi
    done
    if [ "${have_vtarg}" = "no" ]; then
        serverargs="${serverargs} ${vtarg}"
    fi

    # if no display, use default
    if [ -z "${display}" ]
    then
        display=$(detect_unused_display)
    fi

    printf '%s\n%s\n%s\n%s\n%s\n' "${client}" "${clientargs:- }" "${server}" "${serverargs:- }" "${display:- }"
}

enable_xauth() {
    read -r client
    read -r clientargs
    read -r server
    read -r serverargs
    read -r display

    if [ x"${XAUTHORITY}" = x ]; then
        XAUTHORITY=${HOME}/.Xauthority
        export XAUTHORITY
    fi

    removelist=

    # set up default Xauth info for this machine

    # check for GNU hostname
    if hostname --version > /dev/null 2>&1; then
        if hostname --version 2>&1 | grep -q GNU
        then
            hostname=$(hostname -f)
        fi
    fi

    if [ -z "$hostname" ]; then
        hostname=$(hostname)
    fi

    authdisplay=${display:-:0}

    mcookie=$(/usr/bin/mcookie)

    if test x"${mcookie}" = x; then
        echo "Couldn't create cookie"
        exit 1
    fi
    dummy=0

    # create a file with auth information for the server. ':0' is a dummy.
    xserverauthfile=$(mktemp --tmpdir serverauth.XXXXXXXXXX)
    # shellcheck disable=SC2064
    trap "rm -f '${xserverauthfile}'" HUP INT QUIT ILL TRAP BUS TERM
    xauth -q -f "${xserverauthfile}" << EOF
add :${dummy} . ${mcookie}
EOF

    serverargs=${serverargs}" -auth "${xserverauthfile}

    # now add the same credentials to the client authority file
    # if '${displayname}' already exists do not overwrite it as another
    # server may need it. Add them to the '${xserverauthfile}' instead.
    for displayname in ${authdisplay} ${hostname}${authdisplay}; do
        authcookie=$(
            xauth list "${displayname}" \
            | sed -n "s/.*${displayname}[[:space:]*].*[[:space:]*]//p"
        ) 2>/dev/null;
        if [ -z "${authcookie}" ] ; then
            xauth -q << EOF
add ${displayname} . ${mcookie}
EOF
            removelist="${displayname} ${removelist}"
        else
            dummy=$(expr "${dummy}" + 1)
            xauth -q -f "${xserverauthfile}" << EOF
add :${dummy} . ${authcookie}
EOF
        fi
    done
    printf '%s\n%s\n%s\n%s\n%s\n' "${client}" "${clientargs:- }" "${server}" "${serverargs:- }" "${display:- }"
}

main() {
    unset DBUS_SESSION_BUS_ADDRESS
    unset SESSION_MANAGER
    enable_xauth='true'
    if [ -n "${enable_xauth}" ]
    then
        args=$(parse_args "${@}" | process_args | enable_xauth)
    else
        args=$(parse_args "${@}" | process_args)
    fi
    client=$(printf '%s' "${args}" | head -n 1 | tail -n 1)
    clientargs=$(printf '%s' "${args}" | head -n 2 | tail -n 1)
    server=$(printf '%s' "${args}" | head -n 3 | tail -n 1)
    serverargs=$(printf '%s' "${args}" | head -n 4 | tail -n 1)
    display=$(printf '%s' "${args}" | head -n 5 | tail -n 1)
    # shellcheck disable=SC2086
    echo xinit "${client}" ${clientargs} -- "${server}" ${display} ${serverargs}
    exit 1
    retval=${?}
    # shellcheck disable=SC2086
    teardown "${enable_xauth}" "${xserverauthfile}" ${removelist}
    exit ${retval}
}

main "${@}"
