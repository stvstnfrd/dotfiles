#!/bin/sh
#h NAME:
#h 	itsdm - It's The Simple Desktop Manager
#h
#h SYNOPSIS:
#h 	itsdm
#h
#h 	itsdm -h
#h
#h DESCRIPTION:
#h 	 Display a list of available desktop sessions,
#h 	 allow the user to select one,
#h 	 and start it up for them.
#h
#h EXAMPLES:
#h 	itsdm
#h 		Invoke from an interactive shell startup file,
#h 		like *~/.bashrc* or *~/.zshrc*
#h
#h OVERVIEW:
#h 	 TODO: Describe graceful degradation between **fzf** and **sh**
#h
#h OPTIONS:
#h 	-h, --help
#h 		Print this message and exit.
#h
#h 	-m, --man
#h 		View this message in a **PAGER** and exit.
#h
#h 	-f INPUT-FILE, --file INPUT-FILE
#h 		Load a file
#h
#h EXIT STATUS:
#h 	0
#h 		success
#h
#h 	>0
#h 		failure
#h
#h ENVIRONMENT:
#h 	XDG_CACHE_HOME
#h 		The base location for logs, default is *${HOME}/.cache*.
#h
#h 	PAGER
#h 		The pager to be used when invoked with **-m**, **--manual**,
#h 		defaults to **less**.
#h
# 	If they exist, the list of available options will be pulled from
# 	*.desktop* files in the following directories:
#h
#h FILES:
#h
#h 	${XDG_CACHE_HOME}/itsdm/log
#h 		Errors and information messages are logged here.
#h 		Errors and information messages are logged here.
#h
#h 	~/.local/share/xsessions/
#h 		User sessions are stored here
#h
#h 	${NIX_PROFILE}/share/xsessions/
#h 		Nix-installed sessions are stored here
#h
#h 	/usr/share/xsessions/
#h 		System sessions are stored here
#h
#h SEE ALSO:
#h 	itsdmx(1), fzf(1), startx(1)
#h
#h VERSIONS:
#h 	1.0.0
#h 		2021-07-30	created
#
#h BUGS:
#h 	https://github.com/stvstnfrd/dotfiles/issues
# shellcheck disable=SC2003
set -e
print_help() { grep '^#h' "${1}" | sed 's/^#h \?//g'; }
while getopts ":hmM" option; do case ${option} in
    h) print_help "${0}"; exit;;
    *) ;;
esac; done

log() {
    level=${1}
    message=${2}
    logfile=${XDG_CACHE_HOME}/itsdm/log
    test -e "${logfile}" || mkdir -p "$(dirname "${logfile}")"
    datestamp=$(date +'%Y-%m-%d %H:%M:%S')
    echo "${datestamp}	${level}	${message}" >>"${logfile}"
}
gather_choices() {
    grep_args=
    if [ -n "${DISPLAY}${SSH_TTY}" ]
    then
        grep_args='^Terminal=true$'
    fi
    find \
        "${HOME}/.local/share/xsessions/" \
        "${NIX_PROFILE:-${HOME}/.nix-profile}/share/xsessions/" \
        /usr/share/xsessions/ \
        -name '*.desktop' \
        -print0 \
    | xargs \
        -0 \
        grep --files-with-matches "${grep_args}" \
    | sort \
    ;
}
display_choices_sh() {
    i=1
    for line in "${@}"
    do
        echo "${i} ${line}" >&2
        i=$(expr ${i} + 1)
    done
    printf 'Select an application: ' >&2
    read -r choice
    if [ -z "${choice}" ]
    then
        log ERROR "womp!" >&2
        return 1
    fi
    log INFO "YOU SELECTED: ${choice}" >&2
    i=1
    for line in "${@}"
    do
        if [ "${i}" -eq "${choice}" ]
        then
            echo "${line}"
            return 0
        fi
        i=$(expr ${i} + 1)
    done
    echo "INVALID: ${choice}" >&2
    return 1
}
display_choices_fzf() {
    fzf \
        --preview="grep \
        '^\(Name\|Exec\|Comment\)=' \
        {} \
        2>/dev/null \
        " \
        --select-1 \
        --no-unicode \
    ;
}
parse_key_from_desktop_file() {
    key="${1}"
    file="${2}"
    value=$(sed -n -e 's/^'"${key}"'=//p' <"${file}")
    echo "${value}"
}
is_terminal_app() {
    app=${1}
    grep '^Terminal=true' "${app}" >/dev/null 2>&1
}
execute_app() {
    choice=${1}
    exec_key=$(parse_key_from_desktop_file Exec "${choice}")
    if is_terminal_app "${choice}" || [ "${exec_key}" = 'sh' ]
    then
        log INFO "Starting terminal app: ${exec_key}"
        exec_cmd='exec'
    else
        log INFO "Starting X11 app: ${exec_key}"
        exec_cmd='itsdmx'
    fi
    # shellcheck disable=SC2086
    ITSDM_PID=$$ "${exec_cmd}" ${exec_key}
}
check_exec() {
    choice=${1}
    exec_key=$(parse_key_from_desktop_file Exec "${choice}")
    try_key=$(parse_key_from_desktop_file TryExec "${choice}")
    for key in ${try_key} ${exec_key}
    do
        if command -v "${key}" >/dev/null 2>&1
        then
            log INFO "Selected choice is executable: ${key}"
            return
        fi
    done
    log ERROR "Selected choice is not executable: ${key}"
    return 1
}
check_choice() {
    choice=${1}
    if [ -z "${choice}" ]
    then
        return 1
    fi
    return 0
}
handle_choice() {
    choice=${1}
    check_choice "${choice}" || return ${?}
    check_exec "${choice}" || return ${?}
    execute_app "${choice}"
}
main() {
    if command -v fzf >/dev/null 2>&1
    then
        choice=$(gather_choices | display_choices_fzf)
    else
        # shellcheck disable=SC2046
        choice=$(display_choices_sh $(gather_choices))
    fi
    echo; echo
    handle_choice "${choice}"
}

main "${@}"
