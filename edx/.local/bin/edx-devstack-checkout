#!/bin/sh
clone() {
    user=${1}
    repo=${2}
    base=${3}
    repo_base="${base}/${repo}"
    if [ ! -e "${repo_base}" ]; then
        git clone "git@github.com:${user}/${repo}.git" "${base}/${repo}"
    fi
}
gitC() {
    git -C "${@}"
}
makeC() {
    make -C "${@}"
}
try_fork() {
    user=${1}
    repo=${2}
    base=${3}
    forked_url="git@github.com:${user}/${repo}.git"
    repo_base="${base}/${repo}"
    if [ ! -e "${repo_base}" ]; then
        exit 0
    fi
    if [ -z "${user}" ]; then
        exit 0
    fi
    if gitC "${repo_base}" remote -v \
        | grep '^origin\s' \
        | grep ':edx/' \
        > /dev/null \
    ; then
        if gitC "${repo_base}" remote add fork "${forked_url}" && gitC "${repo_base}" fetch fork >/dev/null 2>&1; then
            gitC "${repo_base}" remote rename origin upstream
            gitC "${repo_base}" remote rename fork origin
            gitC "${repo_base}" checkout master
            gitC "${repo_base}" reset --hard origin/master
            gitC "${repo_base}" branch --set-upstream-to=origin/master master
        else
            gitC "${repo_base}" remote remove fork || true
        fi
    elif [ -n "${user}" ] && [ ! -e "${repo_base}" ]; then
        clone "${forked_url}" "${repo_base}"
    fi
}
edx_devstack_update() {
    REPOS="configuration course-discovery credentials cs_comments_service devstack edx-notes-api edx-platform edx-proctoring edx-themes frontend-app-course-authoring frontend-app-gradebook frontend-app-learning frontend-app-program-console frontend-app-publisher frontend-build frontend-platform frontend-template-application xblock-free-text-response xblock-image-modal xblock-in-video-quiz xblock-qualtrics-survey xblock-sdk xblock-sql-grader xblock-submit-and-compare"
    export DEVSTACK_WORKSPACE="${HOME}/edx/src"
    DEVSTACK_WORKSPACE_INTERNAL=${HOME}/edx/local/src
    DEVSTACK_CHECKOUT=${DEVSTACK_WORKSPACE}/devstack
    makeC "${DEVSTACK_CHECKOUT}" dev.pull
    for repo in ${REPOS}; do
        echo >/dev/null  # clone edx "${repo}" "${DEVSTACK_WORKSPACE_INTERNAL}"
    done
}
edx_devstack_checkout() {
    GITHUB_USERNAME=stvstnfrd
    DEVSTACK_NAME=devstack
    WORKON_HOME=${WORKON_HOME-:${HOME}/.local/virtualenvs}
    VENV_PATH=${WORKON_HOME}/${DEVSTACK_NAME}
    export DEVSTACK_WORKSPACE="${HOME}/edx/src"
    DEVSTACK_WORKSPACE_INTERNAL=${HOME}/edx/local/src
    DEVSTACK_CHECKOUT="${DEVSTACK_WORKSPACE}/devstack"
    export DEFAULT_SERVICES=lms+studio+forum+frontend-app-learning+discovery
    PRIVATE_REPOS="${PRIVATE_REPOS:-''}"
    REPOS="configuration course-discovery credentials cs_comments_service devstack edx-notes-api edx-platform edx-proctoring edx-themes frontend-app-course-authoring frontend-app-gradebook frontend-app-learning frontend-app-program-console frontend-app-publisher frontend-build frontend-platform frontend-template-application xblock-free-text-response xblock-image-modal xblock-in-video-quiz xblock-qualtrics-survey xblock-sdk xblock-sql-grader xblock-submit-and-compare"
    test -e "${VENV_PATH}" || python3 -m venv "${VENV_PATH}"
    test -e "${DEVSTACK_CHECKOUT}" || clone edx devstack "${DEVSTACK_WORKSPACE}"
    makeC "${DEVSTACK_CHECKOUT}" requirements
    makeC "${DEVSTACK_CHECKOUT}" down || true
    makeC "${DEVSTACK_CHECKOUT}" dev.clone || true
    makeC "${DEVSTACK_CHECKOUT}" dev.pull
    makeC "${DEVSTACK_CHECKOUT}" dev.provision
    makeC "${DEVSTACK_CHECKOUT}" dev.up
    makeC "${DEVSTACK_CHECKOUT}" dev.migrate
    makeC "${DEVSTACK_CHECKOUT}" dev.static
    for repo in ${REPOS}; do
        clone edx "${repo}" "${DEVSTACK_WORKSPACE}"
        clone "${GITHUB_USERNAME}" "${repo}" "${DEVSTACK_WORKSPACE}"
        try_fork "${GITHUB_USERNAME}" "${repo}" "${DEVSTACK_WORKSPACE}"
    done
    for repo in ${PRIVATE_REPOS}; do
        clone edx "${repo}" "${DEVSTACK_WORKSPACE_INTERNAL}"
    done
    makeC "${DEVSTACK_CHECKOUT}" lms-logs
}
edx_devstack_checkout "${@}"
